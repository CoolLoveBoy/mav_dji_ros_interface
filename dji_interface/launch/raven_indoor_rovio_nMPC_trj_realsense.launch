<launch>
  <arg name="mav_name" default="raven"/>
  <arg name="namespace" default="$(arg mav_name)" />
  <rosparam file="$(find dji_interface)/cfg/$(arg mav_name)/capabilities.yaml"/>
  <group ns="$(arg namespace)" >
  
  <?ignore
    =========================================================
                        DJI interface
    =========================================================
  ?>

  <node name="dji_interface" pkg="dji_interface" type="dji_interface_node" respawn="true" clear_params="true" output="screen">
      <rosparam file="$(find dji_interface)/cfg/$(arg mav_name)/dji_interface_params.yaml"/>
  </node>

  <?ignore
    =========================================================
                        MSF
    =========================================================
  ?>

    <node name="pose_sensor_rovio" pkg="msf_updates" type="pose_sensor" clear_params="true" output="screen">
      <remap from="msf_core/imu_state_input" to="imu" />
      <remap from="msf_updates/transform_input" to="rovio/transform" />
      <rosparam file="$(find dji_interface)/cfg/$(arg mav_name)/msf_parameters_$(arg mav_name)_realsense-2017-05-11-18-42-09.yaml"/>
     </node>

  <?ignore
    =========================================================
                        Realsense
    =========================================================
  ?>
    <arg name="camera"       default="camera" />
    <arg name="camera_type"  default="ZR300" /> <!-- Type of camera -->
    <arg name="serial_no"    default="" />
    <arg name="usb_port_id"  default="" /> <!-- USB "Bus#-Port#" -->
    <arg name="manager"      default="nodelet_manager" />

    <!-- These 'arg' tags are just place-holders for passing values from test files.
    The recommended way is to pass the values directly into the 'param' tags. -->
    <arg name="mode"              default="manual" />
    <arg name="color_fps"         default="15" />
    <arg name="fisheye_fps"       default="30" />
    <arg name="depth_fps"         default="30" />
    <arg name="fisheye_strobe"    default="1" />
    <arg name="fisheye_external_trigger"    default="1" />
    <arg name="enable_imu"    default="true" />


    <param name="$(arg camera)/driver/mode"              type="str"  value="$(arg mode)" />
    <param name="$(arg camera)/driver/color_fps"         type="int"  value="$(arg color_fps)" />
    <param name="$(arg camera)/driver/fisheye_fps"       type="int"  value="$(arg fisheye_fps)" />
    <param name="$(arg camera)/driver/depth_fps"       type="int"  value="$(arg depth_fps)" />
    <param name="$(arg camera)/driver/fisheye_subsample_fps"   type="int"  value="2" />
    <param name="$(arg camera)/driver/color_subsample_fps"   type="int"  value="3" />
    <param name="$(arg camera)/driver/ir_subsample_fps"   type="int"  value="3" />
    <param name="$(arg camera)/driver/ir2_strobe"    type="int"  value="$(arg fisheye_strobe)" />"     value="$(arg enable_imu)" />
    <param name="$(arg camera)/driver/depth_width"     type="int" value="640" />
    <param name="$(arg camera)/driver/depth_height"     type="int" value="480" />
    <param name="$(arg camera)/driver/color_width"     type="int" value="1920" />
    <param name="$(arg camera)/driver/color_height"     type="int" value="1080" />
    <param name="$(arg camera)/driver/enable_depth"     type="bool" value="false" />
    <param name="$(arg camera)/driver/enable_ir"     type="bool" value="false" />
    <param name="$(arg camera)/driver/enable_ir2"     type="bool" value="false" />
    <param name="$(arg camera)/driver/enable_color"     type="bool" value="true" />
    <param name="$(arg camera)/driver/enable_fisheye"     type="bool" value="true" />

    <!-- Refer to the Wiki http://wiki.ros.org/realsense_camera for list of supported parameters -->
    <group ns="$(arg camera)">
      <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" output="screen"/>
      <include file="$(find realsense_camera)/launch/includes/nodelet.launch.xml">
        <arg name="manager"      value="$(arg manager)" />
        <arg name="camera"       value="$(arg camera)" />
        <arg name="camera_type"  value="$(arg camera_type)" />
        <arg name="serial_no"    value="$(arg serial_no)" />
        <arg name="usb_port_id"  value="$(arg usb_port_id)" />
      </include>
    </group>

  <?ignore
    =========================================================
                        linear MPC
    =========================================================
  ?>

    <?ignore remove this ignore comment if you want to use linear MPC.
    <node name="mav_linear_mpc" pkg="mav_linear_mpc" type="mav_linear_mpc_node"  respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="msf_core/odometry" />
      <param name="use_rc_teleop" value="true" />
      <param name="verbose" value="false"/>
      <rosparam file="$(find dji_interface)/cfg/$(arg mav_name)/linear_mpc_rpyrate_thrust.yaml"/>
      <rosparam file="$(find dji_interface)/cfg/$(arg mav_name)/disturbance_observer_rpyrate_thrust.yaml"/>
      <param name="capability_group" value="Core" />
    </node>
    ?>
  <?ignore
    =========================================================
                        nonlinear MPC
    =========================================================
  ?>    
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="msf_core/odometry" />
      <rosparam file="$(find dji_interface)/cfg/$(arg mav_name)/nonlinear_mpc_50hz.yaml" />
      
      <rosparam file="$(find dji_interface)/cfg/$(arg mav_name)/disturbance_observer_rpyrate_thrust.yaml"/>
      <param name="use_rc_teleop" value="true"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
    </node>
    
  <?ignore
    =========================================================
                        Trajectory sampler
    =========================================================
  ?>   
    <node name="trajectory_sampler" pkg="mav_trajectory_generation_ros" type="trajectory_sampler_node" output="screen">
      <param name="publish_whole_trajectory" value="true"/>
    </node>

  <?ignore
    =========================================================
                        Static TF publishing
    =========================================================
  ?>   

    <node pkg="tf" type="static_transform_publisher" name="world_to_vicon" args="0 0 0 0 0 0 1  /world /vicon 100"/>


    <node pkg="tf" type="static_transform_publisher" name="world_to_odom" args="0 0 0 0 0 0 1  /world /odom 100"/>
  </group>
</launch>
